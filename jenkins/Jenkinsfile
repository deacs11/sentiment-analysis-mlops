pipeline {
    // --- MODIFICA CHIAVE ---
    // Invece di 'agent any', specifichiamo un agente Docker.
    // Questo dice a Jenkins di avviare un container Docker e di eseguire la pipeline al suo interno.
    agent {
        docker {
            // Usiamo un'immagine che contiene sia gli strumenti Docker che Git.
            image 'docker:20.10.21-git'
            // Questo permette al container di usare il "motore" Docker del tuo computer host (Docker-in-Docker).
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE_NAME = 'sentiment-analysis-api'
        DOCKER_HUB_USERNAME = 'jorio97'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        // Fase 1: Checkout (implicito, ma possiamo lasciarlo per chiarezza)
        stage('Checkout') {
            steps {
                script {
                    echo "1. Checkout del codice..."
                    checkout scm // Questo comando esegue il checkout
                }
            }
        }

        // Fase 2: Build dell'Immagine Docker
        stage('Build Docker Image') {
            steps {
                script {
                    echo "2. Costruzione dell'immagine Docker..."
                    // Ora usiamo 'sh' perché siamo dentro un container Linux!
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} -f docker/Dockerfile ."
                }
            }
        }

        // Fase 3: Esecuzione degli Unit Test
        stage('Run Unit Tests') {
            steps {
                script {
                    echo "3. Esecuzione degli Unit Test..."
                    // Usiamo 'sh'
                    sh "docker run --rm ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} python -m unittest discover tests"
                }
            }
        }

        // Fase 4: Esecuzione degli Integration Test
        stage('Run Integration Tests') {
            steps {
                script {
                    echo "4. Esecuzione degli Integration Test..."
                    try {
                        // Usiamo 'sh'
                        sh "docker run -d --name test-api-container -p 5000:5000 ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                        echo "In attesa che l'API si avvii..."
                        sleep 10
                        // Usiamo 'sh'
                        sh "docker run --rm --network host ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} python -m unittest tests/test_api.py"
                    } finally {
                        echo "Pulizia del container di test..."
                        // Usiamo 'sh'
                        sh "docker stop test-api-container"
                        sh "docker rm test-api-container"
                    }
                }
            }
        }
        
        // Fase 5: Push dell'Immagine su un Registry
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "5. Pubblicazione dell'immagine su Docker Hub..."
                    // Usiamo 'sh'
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
                    
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        // Usiamo 'sh'
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                        sh "docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                        sh "docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline terminata."
            // Usiamo 'sh'
            sh "docker logout"
            cleanWs()
        }
        success {
            echo "La pipeline è stata completata con successo!"
        }
        failure {
            echo "La pipeline è fallita."
        }
    }
}